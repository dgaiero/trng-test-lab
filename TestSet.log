--------------------------------------------------------------------------------
Testing file output_lcg.txt
--------------------------------------------------------------------------------
** NOTE **
	- Tests are not guaranteed to run in any specific order.

Running test_001_frequency()
----------------------------
This test focuses on verifying the proportion of ones and zeros in a
given sequence. Verification is done to see how close this proportion
equals 0.5 (i.e. the number of ones and zeros should be the same)
::test_001_frequency() PASSED (0.997 > 0.01::sequence is random)::
Completed test_001_frequency in 0.000 s
----------------------------

Running test_002_runs()
-----------------------
This test looks at the total number of uninterrupted bits (a run).
This test determines if the oscillations between runs of zeros and ones
is too fast or slow.
::test_002_runs() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_002_runs in 0.160 s
-----------------------

Running test_003_non_overlapping_template_matching_test()
---------------------------------------------------------
This test looks to see if there are too many occurrences of a given
non-periodic pattern. An m-bit window is used to search for a specific
bit pattern. If the pattern is not found, the window slides by one bit
position. If it is found, the window slides to one bit after the found
pattern.
::test_003_non_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_003_non_overlapping_template_matching_test in 0.185 s
---------------------------------------------------------

Running test_004_overlapping_template_matching_test()
-----------------------------------------------------
This test focuses on the number of occurrences of pre-specified
strings. The difference between this test and the non-overlaping test is
that when a pattern is found, the window slides only one bit before
resuming the search.
::test_004_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_004_overlapping_template_matching_test in 0.200 s
-----------------------------------------------------

Running test_005_linear_complexity()
------------------------------------
This test looks at the length of a linear feedback shift register
and determines whether the sequence is considered complex enough to be
random.
::test_005_linear_complexity() PASSED (1.277 > 0.01::sequence is random)::
Completed test_005_linear_complexity in 33.227 s
------------------------------------

Running test_006_approximate_entropy()
--------------------------------------
This test checks all possible overlapping m-bit patterns in the
sequence. The purpose of this test is to compare the frequency of
overlapping patterns in two adjacent lengths against what is expected
of a random sequence.
::test_006_approximate_entropy() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_006_approximate_entropy in 0.544 s
--------------------------------------

Running test_007_random_excursions_variant()
--------------------------------------------
This test looks at the number of times a particular state occurs in a
random walk. The purpose of this test is to check for deviations from
the expected number of occurrences.
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -18::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -17::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -16::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -15::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -14::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -13::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -12::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -11::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -10::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -9::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -8::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -7::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -6::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -5::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -4::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -3::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -2::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -1::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 1::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 2::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 3::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 4::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 5::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 6::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 7::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 8::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 9::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 10::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 11::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 12::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 13::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 14::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 15::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 16::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 17::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 18::sequence is non-random)::
Completed test_007_random_excursions_variant in 0.533 s
--------------------------------------------

Test Summary:
-------------
Total Pass: 1
	::test_001_frequency() PASSED (0.997 > 0.01::sequence is random)::
Total Fail: 41
	::test_002_runs() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_003_non_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_004_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_005_linear_complexity() PASSED (1.277 > 0.01::sequence is random)::
	::test_006_approximate_entropy() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -18::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -17::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -16::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -15::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -14::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -13::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -12::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -11::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -10::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -9::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -8::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -7::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -6::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -5::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -4::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -3::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -2::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = -1::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 1::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 2::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 3::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 4::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 5::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 6::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 7::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 8::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 9::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 10::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 11::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 12::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 13::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 14::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 15::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 16::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 17::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.000 < 0.01::State = 18::sequence is non-random)::
Total Time: 34.85 s
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Testing file output_sq.txt
--------------------------------------------------------------------------------
** NOTE **
	- Tests are not guaranteed to run in any specific order.

Running test_001_frequency()
----------------------------
This test focuses on verifying the proportion of ones and zeros in a
given sequence. Verification is done to see how close this proportion
equals 0.5 (i.e. the number of ones and zeros should be the same)
::test_001_frequency() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_001_frequency in 0.000 s
----------------------------

Running test_002_runs()
-----------------------
This test looks at the total number of uninterrupted bits (a run).
This test determines if the oscillations between runs of zeros and ones
is too fast or slow.
::test_002_runs() FAILED (abs(pi-0.5) >= tau::0.04999999999999999>=0.002::monobit test failure)::
Completed test_002_runs in -0.000 s
-----------------------

Running test_003_non_overlapping_template_matching_test()
---------------------------------------------------------
This test looks to see if there are too many occurrences of a given
non-periodic pattern. An m-bit window is used to search for a specific
bit pattern. If the pattern is not found, the window slides by one bit
position. If it is found, the window slides to one bit after the found
pattern.
::test_003_non_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_003_non_overlapping_template_matching_test in 0.191 s
---------------------------------------------------------

Running test_004_overlapping_template_matching_test()
-----------------------------------------------------
This test focuses on the number of occurrences of pre-specified
strings. The difference between this test and the non-overlaping test is
that when a pattern is found, the window slides only one bit before
resuming the search.
::test_004_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_004_overlapping_template_matching_test in 0.175 s
-----------------------------------------------------

Running test_005_linear_complexity()
------------------------------------
This test looks at the length of a linear feedback shift register
and determines whether the sequence is considered complex enough to be
random.
::test_005_linear_complexity() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_005_linear_complexity in 0.683 s
------------------------------------

Running test_006_approximate_entropy()
--------------------------------------
This test checks all possible overlapping m-bit patterns in the
sequence. The purpose of this test is to compare the frequency of
overlapping patterns in two adjacent lengths against what is expected
of a random sequence.
::test_006_approximate_entropy() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_006_approximate_entropy in 0.516 s
--------------------------------------

Running test_007_random_excursions_variant()
--------------------------------------------
This test looks at the number of times a particular state occurs in a
random walk. The purpose of this test is to check for deviations from
the expected number of occurrences.
::test_007_random_excursions_variant() PASSED (0.805 > 0.01::State = -18::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.799 > 0.01::State = -17::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.793 > 0.01::State = -16::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.786 > 0.01::State = -15::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.779 > 0.01::State = -14::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.770 > 0.01::State = -13::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.761 > 0.01::State = -12::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.750 > 0.01::State = -11::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.738 > 0.01::State = -10::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.723 > 0.01::State = -9::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.706 > 0.01::State = -8::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.686 > 0.01::State = -7::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.660 > 0.01::State = -6::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.626 > 0.01::State = -5::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.581 > 0.01::State = -4::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.514 > 0.01::State = -3::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.399 > 0.01::State = -2::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.052 > 0.01::State = -1::sequence is random)::
::test_007_random_excursions_variant() FAILED (0.006 < 0.01::State = 1::sequence is non-random)::
::test_007_random_excursions_variant() PASSED (0.075 > 0.01::State = 2::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.168 > 0.01::State = 3::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.244 > 0.01::State = 4::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.304 > 0.01::State = 5::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.353 > 0.01::State = 6::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.393 > 0.01::State = 7::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.426 > 0.01::State = 8::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.455 > 0.01::State = 9::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.480 > 0.01::State = 10::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.501 > 0.01::State = 11::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.520 > 0.01::State = 12::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.538 > 0.01::State = 13::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.553 > 0.01::State = 14::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.567 > 0.01::State = 15::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.580 > 0.01::State = 16::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.592 > 0.01::State = 17::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.602 > 0.01::State = 18::sequence is random)::
Completed test_007_random_excursions_variant in 0.589 s
--------------------------------------------

Test Summary:
-------------
Total Pass: 35
	::test_007_random_excursions_variant() PASSED (0.805 > 0.01::State = -18::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.799 > 0.01::State = -17::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.793 > 0.01::State = -16::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.786 > 0.01::State = -15::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.779 > 0.01::State = -14::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.770 > 0.01::State = -13::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.761 > 0.01::State = -12::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.750 > 0.01::State = -11::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.738 > 0.01::State = -10::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.723 > 0.01::State = -9::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.706 > 0.01::State = -8::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.686 > 0.01::State = -7::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.660 > 0.01::State = -6::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.626 > 0.01::State = -5::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.581 > 0.01::State = -4::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.514 > 0.01::State = -3::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.399 > 0.01::State = -2::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.052 > 0.01::State = -1::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.075 > 0.01::State = 2::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.168 > 0.01::State = 3::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.244 > 0.01::State = 4::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.304 > 0.01::State = 5::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.353 > 0.01::State = 6::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.393 > 0.01::State = 7::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.426 > 0.01::State = 8::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.455 > 0.01::State = 9::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.480 > 0.01::State = 10::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.501 > 0.01::State = 11::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.520 > 0.01::State = 12::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.538 > 0.01::State = 13::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.553 > 0.01::State = 14::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.567 > 0.01::State = 15::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.580 > 0.01::State = 16::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.592 > 0.01::State = 17::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.602 > 0.01::State = 18::sequence is random)::
Total Fail: 7
	::test_001_frequency() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_002_runs() FAILED (abs(pi-0.5) >= tau::0.04999999999999999>=0.002::monobit test failure)::
	::test_003_non_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_004_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_005_linear_complexity() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_006_approximate_entropy() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.006 < 0.01::State = 1::sequence is non-random)::
Total Time: 2.15 s
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Testing file output_trng.txt
--------------------------------------------------------------------------------
** NOTE **
	- Tests are not guaranteed to run in any specific order.

Running test_001_frequency()
----------------------------
This test focuses on verifying the proportion of ones and zeros in a
given sequence. Verification is done to see how close this proportion
equals 0.5 (i.e. the number of ones and zeros should be the same)
::test_001_frequency() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_001_frequency in 0.000 s
----------------------------

Running test_002_runs()
-----------------------
This test looks at the total number of uninterrupted bits (a run).
This test determines if the oscillations between runs of zeros and ones
is too fast or slow.
::test_002_runs() FAILED (abs(pi-0.5) >= tau::0.0742698408889102>=0.0019999440023518904::monobit test failure)::
Completed test_002_runs in -0.000 s
-----------------------

Running test_003_non_overlapping_template_matching_test()
---------------------------------------------------------
This test looks to see if there are too many occurrences of a given
non-periodic pattern. An m-bit window is used to search for a specific
bit pattern. If the pattern is not found, the window slides by one bit
position. If it is found, the window slides to one bit after the found
pattern.
** NOTE **
	- Discarded byte string. Length doesnot match M (expected 125000 actual 56)
::test_003_non_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_003_non_overlapping_template_matching_test in 0.191 s
---------------------------------------------------------

Running test_004_overlapping_template_matching_test()
-----------------------------------------------------
This test focuses on the number of occurrences of pre-specified
strings. The difference between this test and the non-overlaping test is
that when a pattern is found, the window slides only one bit before
resuming the search.
::test_004_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_004_overlapping_template_matching_test in 0.182 s
-----------------------------------------------------

Running test_005_linear_complexity()
------------------------------------
This test looks at the length of a linear feedback shift register
and determines whether the sequence is considered complex enough to be
random.
::test_005_linear_complexity() PASSED (1.426 > 0.01::sequence is random)::
Completed test_005_linear_complexity in 32.892 s
------------------------------------

Running test_006_approximate_entropy()
--------------------------------------
This test checks all possible overlapping m-bit patterns in the
sequence. The purpose of this test is to compare the frequency of
overlapping patterns in two adjacent lengths against what is expected
of a random sequence.
::test_006_approximate_entropy() FAILED (0.000 < 0.01::sequence is non-random)::
Completed test_006_approximate_entropy in 0.516 s
--------------------------------------

Running test_007_random_excursions_variant()
--------------------------------------------
This test looks at the number of times a particular state occurs in a
random walk. The purpose of this test is to check for deviations from
the expected number of occurrences.
::test_007_random_excursions_variant() PASSED (0.978 > 0.01::State = -18::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.885 > 0.01::State = -17::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.788 > 0.01::State = -16::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.687 > 0.01::State = -15::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.630 > 0.01::State = -14::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.641 > 0.01::State = -13::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.602 > 0.01::State = -12::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.585 > 0.01::State = -11::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.592 > 0.01::State = -10::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.518 > 0.01::State = -9::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.491 > 0.01::State = -8::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.548 > 0.01::State = -7::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.580 > 0.01::State = -6::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.470 > 0.01::State = -5::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.313 > 0.01::State = -4::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.205 > 0.01::State = -3::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.102 > 0.01::State = -2::sequence is random)::
::test_007_random_excursions_variant() FAILED (0.005 < 0.01::State = -1::sequence is non-random)::
::test_007_random_excursions_variant() FAILED (0.003 < 0.01::State = 1::sequence is non-random)::
::test_007_random_excursions_variant() PASSED (0.083 > 0.01::State = 2::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.180 > 0.01::State = 3::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.257 > 0.01::State = 4::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.317 > 0.01::State = 5::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.366 > 0.01::State = 6::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.405 > 0.01::State = 7::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.439 > 0.01::State = 8::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.467 > 0.01::State = 9::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.491 > 0.01::State = 10::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.513 > 0.01::State = 11::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.532 > 0.01::State = 12::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.549 > 0.01::State = 13::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.564 > 0.01::State = 14::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.577 > 0.01::State = 15::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.590 > 0.01::State = 16::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.602 > 0.01::State = 17::sequence is random)::
::test_007_random_excursions_variant() PASSED (0.612 > 0.01::State = 18::sequence is random)::
Completed test_007_random_excursions_variant in 0.565 s
--------------------------------------------

Test Summary:
-------------
Total Pass: 34
	::test_007_random_excursions_variant() PASSED (0.978 > 0.01::State = -18::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.885 > 0.01::State = -17::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.788 > 0.01::State = -16::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.687 > 0.01::State = -15::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.630 > 0.01::State = -14::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.641 > 0.01::State = -13::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.602 > 0.01::State = -12::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.585 > 0.01::State = -11::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.592 > 0.01::State = -10::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.518 > 0.01::State = -9::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.491 > 0.01::State = -8::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.548 > 0.01::State = -7::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.580 > 0.01::State = -6::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.470 > 0.01::State = -5::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.313 > 0.01::State = -4::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.205 > 0.01::State = -3::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.102 > 0.01::State = -2::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.083 > 0.01::State = 2::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.180 > 0.01::State = 3::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.257 > 0.01::State = 4::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.317 > 0.01::State = 5::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.366 > 0.01::State = 6::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.405 > 0.01::State = 7::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.439 > 0.01::State = 8::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.467 > 0.01::State = 9::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.491 > 0.01::State = 10::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.513 > 0.01::State = 11::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.532 > 0.01::State = 12::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.549 > 0.01::State = 13::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.564 > 0.01::State = 14::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.577 > 0.01::State = 15::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.590 > 0.01::State = 16::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.602 > 0.01::State = 17::sequence is random)::
	::test_007_random_excursions_variant() PASSED (0.612 > 0.01::State = 18::sequence is random)::
Total Fail: 8
	::test_001_frequency() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_002_runs() FAILED (abs(pi-0.5) >= tau::0.0742698408889102>=0.0019999440023518904::monobit test failure)::
	::test_003_non_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_004_overlapping_template_matching_test() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_005_linear_complexity() PASSED (1.426 > 0.01::sequence is random)::
	::test_006_approximate_entropy() FAILED (0.000 < 0.01::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.005 < 0.01::State = -1::sequence is non-random)::
	::test_007_random_excursions_variant() FAILED (0.003 < 0.01::State = 1::sequence is non-random)::
Total Time: 34.35 s
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
